<?php

use Drupal\Component\Utility\Html;
use Drupal\Core\Entity\EntityInterface;
use Drupal\task_7_smtp\Event\UpdatePokemonNodeEvent;

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function task_7_smtp_node_update(EntityInterface $entity): void {
  if ($entity->bundle() === "pokemon") {
    $pokemon_link = \Drupal::request()->getSchemeAndHttpHost() . $entity->toLink()
        ->getUrl()
        ->toString();

    $message = "Pokemon was updated, link: $pokemon_link";

    $event = new UpdatePokemonNodeEvent([
      'module' => 'task_7_smtp',
      'key' => 'update_pokemon',
      'langcode' => 'en',
      'message' => $message,
    ]);

    dispatch_event(UpdatePokemonNodeEvent::MAIL_NOTIFY, $event);

    $event = new UpdatePokemonNodeEvent([
      'message' => $message
    ]);

    dispatch_event(UpdatePokemonNodeEvent::TELEGRAM_NOTIFY, $event);
  }
}

/**
 * Implements hook_mail().
 */
function task_7_smtp_mail($key, &$message, $params): void {
  $options = ['langcode' => $message['langcode']];

  switch ($key) {
    case 'update_pokemon':
      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['subject'] = t('@title', ['@title' => $params['title']], $options);
      $message['body'][] = Html::escape($params['message']);
      break;
  }
}

function dispatch_event($event_name, $event): void {
  /** @var \Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher $dispatcher */
  $dispatcher = \Drupal::service('event_dispatcher');

  $dispatcher->dispatch($event_name, $event);
}
