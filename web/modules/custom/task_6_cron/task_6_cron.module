<?php

use Drupal\advancedqueue\Entity\Queue;
use Drupal\advancedqueue\Job;
use Drupal\Component\Serialization\Json;
use PokePHP\PokeApi;

const DEFAULT_LIMIT = 50;
const DEFAULT_OFFSET = 0;

// todo: [$item] delete
function addJobsToQueue(array $params): void {
  $queue = Queue::load($params['queue_name']);

  foreach ($params['response']['results'] as $item) {
    $job = Job::create($params['job_name'], [$item]);
    $queue->enqueueJob($job);
  }
}

/**
 * Callback cron for pokemons
 */
function task_6_cron_cron_pokemons_callback(): void {
  $params = [
    'api_params' => [
      'limit' => DEFAULT_LIMIT,
      'offset' => DEFAULT_OFFSET,
    ],
    'queue_name' => 'pokemons_queue',
    'job_name' => 'pokemon_import_job',
  ];

  $pokeApi = new PokeApi();

  while (TRUE) {
    $params['response'] = Json::decode($pokeApi->pokemon('?limit=' . $params['api_params']['limit'] . '&offset=' . $params['api_params']['offset']));
    $pokemonList = [];

    if (isset($params['response'])) {
      foreach ($params['response']['results'] as $pokemon) {
        $pokemonID = explode('/pokemon/', $pokemon['url'])[1];

        $pokemonSpeciesData = Json::decode($pokeApi->pokemonSpecies($pokemonID));
        $pokemonData = Json::decode($pokeApi->pokemon($pokemonID));

        $pokemonList[] = array_merge($pokemonData, $pokemonSpeciesData);
      }
      $params['response']['results'] = $pokemonList;
      addJobsToQueue($params);
    }

    if (is_null($params['response']['next'])) {
      break;
    }

    $params['api_params']['offset'] += DEFAULT_LIMIT;
  }
}

/**
 * Callback cron for abilities
 */
function task_6_cron_cron_abilities_callback(): void {
  $params = [
    'api_params' => [
      'limit' => DEFAULT_LIMIT,
      'offset' => DEFAULT_OFFSET,
    ],
    'queue_name' => 'abilities_queue',
    'job_name' => 'ability_import_job',
  ];

  $pokeApi = new PokeApi();

  while (TRUE) {
    $params['response'] = Json::decode($pokeApi->ability('?limit=' . $params['api_params']['limit'] . '&offset=' . $params['api_params']['offset']));

    if (isset($params['response'])) {
      addJobsToQueue($params);
    }

    if (is_null($params['response']['next'])) {
      break;
    }

    $params['api_params']['offset'] += DEFAULT_LIMIT;
  }
}

/**
 * Callback cron for colors
 */
function task_6_cron_cron_colors_callback(): void {
  $params = [
    'api_params' => [
      'limit' => DEFAULT_LIMIT,
      'offset' => DEFAULT_OFFSET,
    ],
    'queue_name' => 'colors_queue',
    'job_name' => 'color_import_job',
  ];

  $pokeApi = new PokeApi();

  while (TRUE) {
    $params['response'] = Json::decode($pokeApi->pokemonColor('?limit=' . $params['api_params']['limit'] . '&offset=' . $params['api_params']['offset']));

    if (isset($params['response'])) {
      addJobsToQueue($params);
    }

    if (is_null($params['response']['next'])) {
      break;
    }

    $params['api_params']['offset'] += DEFAULT_LIMIT;
  }
}

/**
 * Callback cron for egg_groups
 */
function task_6_cron_cron_egg_groups_callback(): void {
  $params = [
    'api_params' => [
      'limit' => DEFAULT_LIMIT,
      'offset' => DEFAULT_OFFSET,
    ],
    'queue_name' => 'egg_groups_queue',
    'job_name' => 'egg_group_import_job',
  ];

  $pokeApi = new PokeApi();

  while (TRUE) {
    $params['response'] = Json::decode($pokeApi->eggGroup('?limit=' . $params['api_params']['limit'] . '&offset=' . $params['api_params']['offset']));

    if (isset($params['response'])) {
      addJobsToQueue($params);
    }

    if (is_null($params['response']['next'])) {
      break;
    }

    $params['api_params']['offset'] += DEFAULT_LIMIT;
  }
}

/**
 * Callback cron for forms
 */
function task_6_cron_cron_forms_callback(): void {
  $params = [
    'api_params' => [
      'limit' => DEFAULT_LIMIT,
      'offset' => DEFAULT_OFFSET,
    ],
    'queue_name' => 'forms_queue',
    'job_name' => 'form_import_job',
  ];

  $pokeApi = new PokeApi();

  while (TRUE) {
    $params['response'] = Json::decode($pokeApi->pokemonForm('?limit=' . $params['api_params']['limit'] . '&offset=' . $params['api_params']['offset']));

    if (isset($params['response'])) {
      addJobsToQueue($params);
    }

    if (is_null($params['response']['next'])) {
      break;
    }

    $params['api_params']['offset'] += DEFAULT_LIMIT;
  }
}

/**
 * Callback cron for genders
 */
function task_6_cron_cron_genders_callback(): void {
  $params = [
    'api_params' => [
      'limit' => DEFAULT_LIMIT,
      'offset' => DEFAULT_OFFSET,
    ],
    'queue_name' => 'genders_queue',
    'job_name' => 'gender_import_job',
  ];

  $pokeApi = new PokeApi();

  while (TRUE) {
    $params['response'] = Json::decode($pokeApi->gender('?limit=' . $params['api_params']['limit'] . '&offset=' . $params['api_params']['offset']));

    if (isset($params['response'])) {
      addJobsToQueue($params);
    }

    if (is_null($params['response']['next'])) {
      break;
    }

    $params['api_params']['offset'] += DEFAULT_LIMIT;
  }
}

/**
 * Callback cron for habitats
 */
function task_6_cron_cron_habitats_callback(): void {
  $params = [
    'api_params' => [
      'limit' => DEFAULT_LIMIT,
      'offset' => DEFAULT_OFFSET,
    ],
    'queue_name' => 'habitats_queue',
    'job_name' => 'habitat_import_job',
  ];

  $pokeApi = new PokeApi();

  while (TRUE) {
    $params['response'] = Json::decode($pokeApi->pokemonHabitat('?limit=' . $params['api_params']['limit'] . '&offset=' . $params['api_params']['offset']));

    if (isset($params['response'])) {
      addJobsToQueue($params);
    }

    if (is_null($params['response']['next'])) {
      break;
    }

    $params['api_params']['offset'] += DEFAULT_LIMIT;
  }
}

/**
 * Callback cron for shapes
 */
function task_6_cron_cron_shapes_callback(): void {
  $params = [
    'api_params' => [
      'limit' => DEFAULT_LIMIT,
      'offset' => DEFAULT_OFFSET,
    ],
    'queue_name' => 'shapes_queue',
    'job_name' => 'shape_import_job',
  ];

  $pokeApi = new PokeApi();

  while (TRUE) {
    $params['response'] = Json::decode($pokeApi->pokemonShape('?limit=' . $params['api_params']['limit'] . '&offset=' . $params['api_params']['offset']));

    if (isset($params['response'])) {
      addJobsToQueue($params);
    }

    if (is_null($params['response']['next'])) {
      break;
    }

    $params['api_params']['offset'] += DEFAULT_LIMIT;
  }
}

/**
 * Callback cron for species
 */
function task_6_cron_cron_species_callback(): void {
  $params = [
    'api_params' => [
      'limit' => DEFAULT_LIMIT,
      'offset' => DEFAULT_OFFSET,
    ],
    'queue_name' => 'species_queue',
    'job_name' => 'specie_import_job',
  ];

  $pokeApi = new PokeApi();

  while (TRUE) {
    $params['response'] = Json::decode($pokeApi->pokemonSpecies('?limit=' . $params['api_params']['limit'] . '&offset=' . $params['api_params']['offset']));

    if (isset($params['response'])) {
      addJobsToQueue($params);
    }

    if (is_null($params['response']['next'])) {
      break;
    }

    $params['api_params']['offset'] += DEFAULT_LIMIT;
  }
}

/**
 * Callback cron for types
 */
function task_6_cron_cron_types_callback(): void {
  $params = [
    'api_params' => [
      'limit' => DEFAULT_LIMIT,
      'offset' => DEFAULT_OFFSET,
    ],
    'queue_name' => 'types_queue',
    'job_name' => 'type_import_job',
  ];

  $pokeApi = new PokeApi();

  while (TRUE) {
    $params['response'] = Json::decode($pokeApi->pokemonType('?limit=' . $params['api_params']['limit'] . '&offset=' . $params['api_params']['offset']));

    if (isset($params['response'])) {
      addJobsToQueue($params);
    }

    if (is_null($params['response']['next'])) {
      break;
    }

    $params['api_params']['offset'] += DEFAULT_LIMIT;
  }
}
